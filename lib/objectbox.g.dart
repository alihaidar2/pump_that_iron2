// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/exercise.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3681725392697779731),
      name: 'Exercise',
      lastPropertyId: const IdUid(6, 4633299605220527007),
      flags: 2,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5907831722591512028),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3627145366026860758),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1476185178548762614),
            name: 'target',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 693060371918079039),
            name: 'bodyPart',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1605873007679725871),
            name: 'equipment',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4633299605220527007),
            name: 'gifUrl',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 3248275344649977591),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        2690128395146467086,
        8710906015806695301,
        3248275344649977591
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5483389686525093381,
        9037548890521716223,
        605189217942144292,
        1075626452815573125
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Exercise: EntityDefinition<Exercise>(
        model: _entities[0],
        toOneRelations: (Exercise object) => [],
        toManyRelations: (Exercise object) => {},
        getId: (Exercise object) => object.id,
        setId: (Exercise object, int id) {
          object.id = id;
        },
        objectToFB: (Exercise object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final targetOffset =
              object.target == null ? null : fbb.writeString(object.target!);
          final bodyPartOffset = object.bodyPart == null
              ? null
              : fbb.writeString(object.bodyPart!);
          final equipmentOffset = object.equipment == null
              ? null
              : fbb.writeString(object.equipment!);
          final gifUrlOffset =
              object.gifUrl == null ? null : fbb.writeString(object.gifUrl!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, targetOffset);
          fbb.addOffset(3, bodyPartOffset);
          fbb.addOffset(4, equipmentOffset);
          fbb.addOffset(5, gifUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Exercise(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              target: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              bodyPart: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              equipment: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              gifUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Exercise] entity fields to define ObjectBox queries.
class Exercise_ {
  /// see [Exercise.id]
  static final id = QueryIntegerProperty<Exercise>(_entities[0].properties[0]);

  /// see [Exercise.name]
  static final name = QueryStringProperty<Exercise>(_entities[0].properties[1]);

  /// see [Exercise.target]
  static final target =
      QueryStringProperty<Exercise>(_entities[0].properties[2]);

  /// see [Exercise.bodyPart]
  static final bodyPart =
      QueryStringProperty<Exercise>(_entities[0].properties[3]);

  /// see [Exercise.equipment]
  static final equipment =
      QueryStringProperty<Exercise>(_entities[0].properties[4]);

  /// see [Exercise.gifUrl]
  static final gifUrl =
      QueryStringProperty<Exercise>(_entities[0].properties[5]);
}
